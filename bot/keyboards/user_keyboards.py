"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from typing import List, Optional
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from bot.database.models.category import Category
from bot.database.models.product import Product


def get_main_menu_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        is_admin: –§–ª–∞–≥, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

    Returns:
        ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin:
        buttons.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )


def get_categories_keyboard(
    categories: List[Category],
    parent_id: Optional[int] = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    Args:
        categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")

    Returns:
        InlineKeyboardMarkup
    """
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(categories), 2):
        row = []
        for j in range(2):
            if i + j < len(categories):
                cat = categories[i + j]
                row.append(InlineKeyboardButton(
                    text=cat.name,
                    callback_data=f"category:{cat.id}"
                ))
        buttons.append(row)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if parent_id is not None:
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category:{parent_id}")
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_products_keyboard(
    products: List[Product],
    category_id: int,
    current_page: int = 1,
    total_pages: int = 1
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

    Args:
        products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    Returns:
        InlineKeyboardMarkup
    """
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(products), 2):
        row = []
        for j in range(2):
            if i + j < len(products):
                product = products[i + j]
                row.append(InlineKeyboardButton(
                    text=f"{product.name} - {product.effective_price} ‚ÇΩ",
                    callback_data=f"product:{product.id}"
                ))
        buttons.append(row)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        pagination_row = []
        if current_page > 1:
            pagination_row.append(InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"category:{category_id}:page:{current_page - 1}"
            ))
        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}",
            callback_data="noop"
        ))
        if current_page < total_pages:
            pagination_row.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"category:{category_id}:page:{current_page + 1}"
            ))
        buttons.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_product_card_keyboard(
    product_id: int,
    has_variants: bool = False,
    category_id: Optional[int] = None,
    current_image: int = 0,
    total_images: int = 1
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞

    Args:
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        has_variants: –ï—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        current_image: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (0-based)
        total_images: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    Returns:
        InlineKeyboardMarkup
    """
    buttons = []

    # –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ)
    if total_images > 1:
        gallery_row = []
        if current_image > 0:
            gallery_row.append(InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"product:{product_id}:photo:{current_image - 1}"
            ))
        gallery_row.append(InlineKeyboardButton(
            text=f"üì∑ {current_image + 1}/{total_images}",
            callback_data="noop"
        ))
        if current_image < total_images - 1:
            gallery_row.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"product:{product_id}:photo:{current_image + 1}"
            ))
        buttons.append(gallery_row)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞/—Ü–≤–µ—Ç–∞
    if has_variants:
        buttons.append([
            InlineKeyboardButton(
                text="üõí –í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∏ —Ü–≤–µ—Ç",
                callback_data=f"product:{product_id}:select_variant"
            )
        ])
    else:
        # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        buttons.append([
            InlineKeyboardButton(
                text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_to_cart:{product_id}"
            )
        ])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if category_id:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"category:{category_id}"
        ))
    nav_row.append(InlineKeyboardButton(
        text="üõç –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        callback_data="catalog"
    ))
    buttons.append(nav_row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_variant_selection_keyboard(
    product_id: int,
    sizes: List[str],
    colors: List[str],
    selected_size: Optional[str] = None,
    selected_color: Optional[str] = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ü–≤–µ—Ç–∞

    Args:
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        sizes: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        colors: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        selected_size: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        selected_color: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç

    Returns:
        InlineKeyboardMarkup
    """
    buttons = []

    # –†–∞–∑–º–µ—Ä—ã
    if sizes:
        size_row = []
        for size in sizes:
            marker = "‚úì " if size == selected_size else ""
            size_row.append(InlineKeyboardButton(
                text=f"{marker}{size}",
                callback_data=f"product:{product_id}:size:{size}"
            ))
        buttons.append(size_row)

    # –¶–≤–µ—Ç–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä)
    if selected_size and colors:
        color_rows = []
        for i in range(0, len(colors), 3):
            row = []
            for j in range(3):
                if i + j < len(colors):
                    color = colors[i + j]
                    marker = "‚úì " if color == selected_color else ""
                    row.append(InlineKeyboardButton(
                        text=f"{marker}{color}",
                        callback_data=f"product:{product_id}:color:{color}"
                    ))
            color_rows.append(row)
        buttons.extend(color_rows)

    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É" –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if selected_size and selected_color:
        buttons.append([
            InlineKeyboardButton(
                text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_to_cart:{product_id}:{selected_size}:{selected_color}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É",
            callback_data=f"product:{product_id}"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_cart_keyboard(has_items: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã

    Args:
        has_items: –ï—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ

    Returns:
        InlineKeyboardMarkup
    """
    buttons = []

    if has_items:
        buttons.append([
            InlineKeyboardButton(text="üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        ])
        buttons.append([
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:clear")
        ])

    buttons.append([
        InlineKeyboardButton(text="üõç –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_cart_item_keyboard(cart_item_id: int, quantity: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ

    Args:
        cart_item_id: ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        quantity: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    Returns:
        InlineKeyboardMarkup
    """
    buttons = [
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"cart:decrease:{cart_item_id}"),
            InlineKeyboardButton(text=f"{quantity} —à—Ç.", callback_data="noop"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"cart:increase:{cart_item_id}"),
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"cart:remove:{cart_item_id}")
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    buttons = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_product_card_inline_keyboard(
    product_id: int,
    has_variants: bool = False,
    category_id: Optional[int] = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

    Args:
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        has_variants: –ï—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        InlineKeyboardMarkup
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    if has_variants:
        buttons.append([
            InlineKeyboardButton(
                text="üõí –í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä/—Ü–≤–µ—Ç",
                callback_data=f"product:{product_id}"
            )
        ])
    else:
        buttons.append([
            InlineKeyboardButton(
                text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_to_cart:{product_id}"
            )
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_pagination_keyboard(
    category_id: int,
    current_page: int,
    total_pages: int,
    parent_id: Optional[int] = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤

    Args:
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        InlineKeyboardMarkup
    """
    buttons = []

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        pagination_row = []
        if current_page > 1:
            pagination_row.append(InlineKeyboardButton(
                text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                callback_data=f"category:{category_id}:page:{current_page - 1}"
            ))
        if current_page < total_pages:
            pagination_row.append(InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è",
                callback_data=f"category:{category_id}:page:{current_page + 1}"
            ))
        if pagination_row:
            buttons.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    if parent_id is not None:
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category:{parent_id}")
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="üè† –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_delivery_type_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

    Returns:
        InlineKeyboardMarkup
    """
    buttons = [
        [InlineKeyboardButton(text="üöö –ö—É—Ä—å–µ—Ä", callback_data="delivery:courier")],
        [InlineKeyboardButton(text="üè™ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery:pickup")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="checkout:back")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_skip_comment_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

    Returns:
        InlineKeyboardMarkup
    """
    buttons = [
        [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="checkout:skip_comment")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="checkout:back")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_order_confirmation_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

    Returns:
        InlineKeyboardMarkup
    """
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout:confirm")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="checkout:edit")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="checkout:cancel")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_cancel_checkout_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è

    Returns:
        InlineKeyboardMarkup
    """
    buttons = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="checkout:cancel")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)
