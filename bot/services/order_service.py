"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
"""
from datetime import datetime
from decimal import Decimal
from typing import Optional, List
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from bot.database.models.order import Order, OrderStatus, DeliveryType
from bot.database.models.order_item import OrderItem
from bot.database.models.cart_item import CartItem
from bot.utils.logger import setup_logger

logger = setup_logger(__name__)


async def generate_order_number(session: AsyncSession) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞

    –§–æ—Ä–º–∞—Ç: ORD-YYYYMMDD-NNN
    –≥–¥–µ NNN - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∑–∞ –¥–µ–Ω—å

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î

    Returns:
        –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    """
    today = datetime.now().strftime("%Y%m%d")
    prefix = f"ORD-{today}-"

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    result = await session.execute(
        select(func.count(Order.id)).where(
            Order.order_number.like(f"{prefix}%")
        )
    )
    count = result.scalar() or 0

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä
    order_number = f"{prefix}{count + 1:03d}"

    return order_number


async def calculate_cart_total(session: AsyncSession, user_id: int) -> Decimal:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –û–±—â–∞—è —Å—É–º–º–∞
    """
    result = await session.execute(
        select(CartItem)
        .where(CartItem.user_id == user_id)
        .options(selectinload(CartItem.product))
    )
    cart_items = result.scalars().all()

    total = Decimal('0')
    for item in cart_items:
        if item.product:
            price = item.product.effective_price
            total += price * item.quantity

    return total


async def create_order(
    session: AsyncSession,
    user_id: int,
    customer_name: str,
    customer_phone: str,
    delivery_type: DeliveryType,
    delivery_address: Optional[str] = None,
    comment: Optional[str] = None
) -> Optional[Order]:
    """
    –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        customer_name: –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        customer_phone: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        delivery_type: –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ (courier –∏–ª–∏ pickup)
        delivery_address: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è –∫—É—Ä—å–µ—Ä–∞)
        comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É

    Returns:
        –°–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ None –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    result = await session.execute(
        select(CartItem)
        .where(CartItem.user_id == user_id)
        .options(
            selectinload(CartItem.product),
            selectinload(CartItem.variant)
        )
    )
    cart_items = result.scalars().all()

    if not cart_items:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return None

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_amount = Decimal('0')
    order_items_data = []

    for item in cart_items:
        if not item.product:
            continue

        price = item.product.effective_price
        subtotal = price * item.quantity
        total_amount += subtotal

        order_items_data.append({
            'product_id': item.product_id,
            'variant_id': item.variant_id,
            'quantity': item.quantity,
            'price_at_purchase': price,
            'subtotal': subtotal
        })

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_number = await generate_order_number(session)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order = Order(
        user_id=user_id,
        order_number=order_number,
        total_amount=total_amount,
        status=OrderStatus.NEW,
        customer_name=customer_name,
        customer_phone=customer_phone,
        delivery_type=delivery_type,
        delivery_address=delivery_address,
        comment=comment
    )

    session.add(order)
    await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞

    # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    for item_data in order_items_data:
        order_item = OrderItem(
            order_id=order.id,
            **item_data
        )
        session.add(order_item)

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await session.execute(
        select(CartItem)
        .where(CartItem.user_id == user_id)
    )
    for item in cart_items:
        await session.delete(item)

    await session.commit()

    logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {total_amount}")

    return order


async def get_order_by_id(session: AsyncSession, order_id: int) -> Optional[Order]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        order_id: ID –∑–∞–∫–∞–∑–∞

    Returns:
        –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None
    """
    result = await session.execute(
        select(Order)
        .where(Order.id == order_id)
        .options(
            selectinload(Order.items).selectinload(OrderItem.product),
            selectinload(Order.items).selectinload(OrderItem.variant)
        )
    )
    return result.scalar_one_or_none()


async def get_order_by_number(session: AsyncSession, order_number: str) -> Optional[Order]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        order_number: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞

    Returns:
        –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None
    """
    result = await session.execute(
        select(Order)
        .where(Order.order_number == order_number)
        .options(
            selectinload(Order.items).selectinload(OrderItem.product),
            selectinload(Order.items).selectinload(OrderItem.variant)
        )
    )
    return result.scalar_one_or_none()


async def get_user_orders(
    session: AsyncSession,
    user_id: int,
    limit: int = 10,
    offset: int = 0
) -> List[Order]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    """
    result = await session.execute(
        select(Order)
        .where(Order.user_id == user_id)
        .order_by(Order.created_at.desc())
        .limit(limit)
        .offset(offset)
        .options(
            selectinload(Order.items).selectinload(OrderItem.product)
        )
    )
    return list(result.scalars().all())


async def count_user_orders(session: AsyncSession, user_id: int) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    """
    result = await session.execute(
        select(func.count(Order.id)).where(Order.user_id == user_id)
    )
    return result.scalar() or 0


async def update_order_status(
    session: AsyncSession,
    order_id: int,
    new_status: OrderStatus
) -> Optional[Order]:
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        order_id: ID –∑–∞–∫–∞–∑–∞
        new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å

    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ None
    """
    result = await session.execute(
        select(Order).where(Order.id == order_id)
    )
    order = result.scalar_one_or_none()

    if order:
        order.status = new_status
        await session.commit()
        logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.order_number} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}")

    return order


async def cancel_order(session: AsyncSession, order_id: int) -> bool:
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        order_id: ID –∑–∞–∫–∞–∑–∞

    Returns:
        True –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    result = await update_order_status(session, order_id, OrderStatus.CANCELLED)
    return result is not None


def format_order_details(order: Order) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    Args:
        order: –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    """
    status_emoji = {
        OrderStatus.NEW: "üÜï",
        OrderStatus.PROCESSING: "‚è≥",
        OrderStatus.CONFIRMED: "‚úÖ",
        OrderStatus.PREPARING: "üì¶",
        OrderStatus.READY: "‚ú®",
        OrderStatus.DELIVERING: "üöö",
        OrderStatus.DELIVERED: "üéâ",
        OrderStatus.CANCELLED: "‚ùå"
    }

    status_text = {
        OrderStatus.NEW: "–ù–æ–≤—ã–π",
        OrderStatus.PROCESSING: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        OrderStatus.CONFIRMED: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        OrderStatus.PREPARING: "–ì–æ—Ç–æ–≤–∏—Ç—Å—è",
        OrderStatus.READY: "–ì–æ—Ç–æ–≤",
        OrderStatus.DELIVERING: "–í –¥–æ—Å—Ç–∞–≤–∫–µ",
        OrderStatus.DELIVERED: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
        OrderStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω"
    }

    delivery_text = "üöö –ö—É—Ä—å–µ—Ä" if order.delivery_type == DeliveryType.COURIER else "üè™ –°–∞–º–æ–≤—ã–≤–æ–∑"

    text = f"–ó–∞–∫–∞–∑ ‚Ññ{order.order_number}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {status_emoji.get(order.status, '')} {status_text.get(order.status, order.status)}\n"
    text += f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order.customer_name}\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}\n"
    text += f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}\n"

    if order.delivery_address:
        text += f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"

    if order.comment:
        text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}\n"

    text += f"\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    for item in order.items:
        if not item.product:
            continue

        name = item.product.name
        variant_info = ""
        if item.variant:
            variant_info = f" ({item.variant.size}, {item.variant.color})"

        text += f"{name}{variant_info}\n"
        text += f"{item.price_at_purchase} ‚ÇΩ √ó {item.quantity} —à—Ç. = {item.subtotal} ‚ÇΩ\n"

    text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    text += f"–ò—Ç–æ–≥–æ: {order.total_amount} ‚ÇΩ"

    return text
