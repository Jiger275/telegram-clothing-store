"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from datetime import datetime

from bot.database.models.user import User
from bot.database.models.order import Order
from bot.keyboards import user_keyboards
from bot.texts import user_messages

router = Router(name="profile")


async def show_profile(message: Message, session: AsyncSession, user: User):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session: –°–µ—Å—Å–∏—è –ë–î
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(func.count(Order.id)).where(Order.user_id == user.id)
    )
    orders_count = result.scalar() or 0

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    created_at = user.created_at.strftime("%d.%m.%Y")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = user_messages.PROFILE_INFO.format(
        full_name=user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        username=user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
        created_at=created_at,
        orders_count=orders_count
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = user_keyboards.get_profile_keyboard()

    await message.answer(
        profile_text,
        reply_markup=keyboard
    )


@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, session: AsyncSession, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ—Ñ–∏–ª—å"

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session: –°–µ—Å—Å–∏—è –ë–î
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    await show_profile(message, session, user)


@router.message(F.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders_handler(message: Message, session: AsyncSession, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session: –°–µ—Å—Å–∏—è –ë–î
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(Order)
        .where(Order.user_id == user.id)
        .order_by(Order.created_at.desc())
    )
    orders = result.scalars().all()

    if not orders:
        await message.answer(
            user_messages.NO_ORDERS,
            reply_markup=user_keyboards.get_main_menu_keyboard(user.is_admin)
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    await show_orders_page(message, session, user, orders, page=1)


async def show_orders_page(
    message: Message,
    session: AsyncSession,
    user: User,
    orders: list[Order],
    page: int = 1,
    orders_per_page: int = 5
):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session: –°–µ—Å—Å–∏—è –ë–î
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        orders: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        orders_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    """
    total_orders = len(orders)
    total_pages = (total_orders + orders_per_page - 1) // orders_per_page

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * orders_per_page
    end_idx = start_idx + orders_per_page
    page_orders = orders[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–∫–∞–∑–∞–º–∏
    text = user_messages.ORDER_HISTORY_HEADER

    for order in page_orders:
        order_date = order.created_at.strftime("%d.%m.%Y %H:%M")
        status_emoji = get_status_emoji(order.status)

        text += f"\nüì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.order_number}\n"
        text += f"–î–∞—Ç–∞: {order_date}\n"
        text += f"–°—É–º–º–∞: {order.total_amount} ‚ÇΩ\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {get_status_text(order.status)}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = user_keyboards.get_orders_list_keyboard(
        orders=[order for order in page_orders],
        current_page=page,
        total_pages=total_pages
    )

    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("orders:page:"))
async def orders_page_handler(callback: CallbackQuery, session: AsyncSession, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        session: –°–µ—Å—Å–∏—è –ë–î
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    page = int(callback.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(Order)
        .where(Order.user_id == user.id)
        .order_by(Order.created_at.desc())
    )
    orders = result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    orders_per_page = 5
    total_pages = (len(orders) + orders_per_page - 1) // orders_per_page

    start_idx = (page - 1) * orders_per_page
    end_idx = start_idx + orders_per_page
    page_orders = orders[start_idx:end_idx]

    text = user_messages.ORDER_HISTORY_HEADER

    for order in page_orders:
        order_date = order.created_at.strftime("%d.%m.%Y %H:%M")
        status_emoji = get_status_emoji(order.status)

        text += f"\nüì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.order_number}\n"
        text += f"–î–∞—Ç–∞: {order_date}\n"
        text += f"–°—É–º–º–∞: {order.total_amount} ‚ÇΩ\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {get_status_text(order.status)}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    keyboard = user_keyboards.get_orders_list_keyboard(
        orders=[order for order in page_orders],
        current_page=page,
        total_pages=total_pages
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("order:"))
async def order_details_handler(callback: CallbackQuery, session: AsyncSession, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        session: –°–µ—Å—Å–∏—è –ë–î
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    order_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    result = await session.execute(
        select(Order).where(Order.id == order_id, Order.user_id == user.id)
    )
    order = result.scalar_one_or_none()

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_date = order.created_at.strftime("%d.%m.%Y %H:%M")
    status_emoji = get_status_emoji(order.status)

    text = f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.order_number}\n\n"
    text += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order_date}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {get_status_text(order.status)}\n\n"

    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += "üìã –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n\n"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
    await session.refresh(order, ["items"])

    for item in order.items:
        await session.refresh(item, ["product", "variant"])

        variant_info = ""
        if item.variant:
            parts = []
            if item.variant.size:
                parts.append(f"–†–∞–∑–º–µ—Ä: {item.variant.size}")
            if item.variant.color:
                parts.append(f"–¶–≤–µ—Ç: {item.variant.color}")
            if parts:
                variant_info = f" ({', '.join(parts)})"

        text += f"‚Ä¢ {item.product.name}{variant_info}\n"
        text += f"  {item.price_at_purchase} ‚ÇΩ √ó {item.quantity} —à—Ç. = {item.subtotal} ‚ÇΩ\n\n"

    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"–û–±—â–∞—è —Å—É–º–º–∞: {order.total_amount} ‚ÇΩ\n\n"

    text += "üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n"
    text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order.customer_name}\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}\n"
    text += f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {get_delivery_type_text(order.delivery_type)}\n"

    if order.delivery_address:
        text += f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"

    if order.comment:
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}\n"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = user_keyboards.get_order_details_keyboard()

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "back_to_orders")
async def back_to_orders_handler(callback: CallbackQuery, session: AsyncSession, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        session: –°–µ—Å—Å–∏—è –ë–î
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(Order)
        .where(Order.user_id == user.id)
        .order_by(Order.created_at.desc())
    )
    orders = result.scalars().all()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    orders_per_page = 5
    total_pages = (len(orders) + orders_per_page - 1) // orders_per_page

    page_orders = orders[:orders_per_page]

    text = user_messages.ORDER_HISTORY_HEADER

    for order in page_orders:
        order_date = order.created_at.strftime("%d.%m.%Y %H:%M")
        status_emoji = get_status_emoji(order.status)

        text += f"\nüì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.order_number}\n"
        text += f"–î–∞—Ç–∞: {order_date}\n"
        text += f"–°—É–º–º–∞: {order.total_amount} ‚ÇΩ\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {get_status_text(order.status)}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    keyboard = user_keyboards.get_orders_list_keyboard(
        orders=page_orders,
        current_page=1,
        total_pages=total_pages
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


def get_status_emoji(status: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞

    Args:
        status: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

    Returns:
        –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
    """
    status_emojis = {
        "new": "üÜï",
        "processing": "‚è≥",
        "confirmed": "‚úÖ",
        "shipped": "üöö",
        "delivered": "üì¶",
        "cancelled": "‚ùå"
    }
    return status_emojis.get(status, "‚ùì")


def get_status_text(status: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞

    Args:
        status: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

    Returns:
        –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    """
    status_texts = {
        "new": "–ù–æ–≤—ã–π",
        "processing": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        "shipped": "–ü–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É",
        "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω"
    }
    return status_texts.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")


def get_delivery_type_text(delivery_type: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

    Args:
        delivery_type: –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏

    Returns:
        –¢–µ–∫—Å—Ç —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    """
    delivery_types = {
        "courier": "–ö—É—Ä—å–µ—Ä",
        "pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑"
    }
    return delivery_types.get(delivery_type, "–ù–µ —É–∫–∞–∑–∞–Ω")
